
  - platform: time_date
    display_options:
      - 'time'
      - 'date'
      - 'date_time'
      - 'time_date'
      - 'time_utc'

#  - platform: miflora
#    mac: 'C4:7C:8D:65:F1:26'
#    name: Flower 1
#    force_update: false
#    median: 3
#    monitored_conditions:
#      - moisture
#      - light
#      - temperature
#      - conductivity
#      - battery

  - platform: netatmo
    station: WeatherCicciput

  - platform: systemmonitor
    resources:
    - type: disk_use_percent
      arg: /
    - type: memory_free
    - type: memory_use_percent
    - type: processor_use
    - type: last_boot

#  - platform: filesize
#    file_paths:
#      - /config/home-assistant_v2.db

  - platform: uptime
    name: HomeAssistant attivo da


  - platform: github
    access_token: !secret github_access_token
    repositories:
      - path: 'daxda/HomeAssistant'
        name: My GitHub

  - platform: command_line # funziona solo su Raspberry
    name: CPU Temperature
    command: cat /sys/class/thermal/thermal_zone0/temp
    unit_of_measurement: Â°C
    value_template: '{{ value | multiply(0.001) | round(1) }}'
  - platform: cert_expiry
    host: !secret ddomain
  - platform: moon

  - platform: darksky
    api_key: !secret darksky_apikey
    forecast:
      - 0
    language: it
    monitored_conditions:
      - summary
      - icon
      - temperature_high
      - apparent_temperature
      - wind_speed
      - cloud_cover
      - precip_intensity

  - platform: history_stats
    name: Ore alla TV oggi
    entity_id: media_player.philips_tv
    state: 'on'
    type: time
    start: '{{ now().replace(hour=0).replace(minute=0).replace(second=0) }}'
    end: '{{ now() }}'
  - platform: history_stats
    name: Ore alla TV settimana
    entity_id: media_player.philips_tv
    state: 'on'
    type: time
    start: '{{ as_timestamp( now().replace(hour=0).replace(minute=0).replace(second=0) ) - now().weekday() * 86400 }}'
    end: '{{ now() }}'


############ Da qui in poi tutti i sensori creati tramite template
  - platform: template
    sensors:

      giornianatale:
        friendly_name: 'Giorni al Natale'
        value_template: '{{ (( as_timestamp(strptime("25.12."+ now().strftime("%Y"), "%d.%m.%Y")) - as_timestamp(strptime(now().strftime("%d")+"."+now().strftime("%m")+"."+now().strftime("%Y"), "%d.%m.%Y"))) / 86400 ) | round(0) }}' #'{{ (( as_timestamp(now()) - as_timestamp(strptime("25.12."+now().strftime("%Y"), "%d.%m.%Y")) ) / 86400 ) | round(0) }}'
        unit_of_measurement: "Giorni"
        entity_id: sensor.date
        icon_template: mdi:calendar

      giorno_del_mese:
        entity_id: sensor.date
        value_template: >
          {% set dd = now().day %}
          {% set dm = now().month %}
          {% set nm = (as_timestamp(now()) + (24*3600))| timestamp_custom('%m', True) | int %}
          {% if (dm!=nm ) %}
          ultimo
          {% else %}
          {{dd}}
          {% endif %}

      fasilunari:
        friendly_name: "Luna"
        icon_template: >
          {% if is_state('sensor.moon', 'new_moon') %}
            mdi:circle-outline
          {% elif is_state('sensor.moon', 'waxing_crescent') %}
            mdi:arrow-up-bold
          {% elif is_state('sensor.moon', 'first_quarter') %}
            mdi:arrow-up-bold
          {% elif is_state('sensor.moon', 'waxing_gibbous') %}
            mdi:arrow-up-bold
          {% elif is_state('sensor.moon', 'full_moon') %}
            mdi:brightness-1
          {% elif is_state('sensor.moon', 'waning_gibbous') %}
            mdi:arrow-down-bold
          {% elif is_state('sensor.moon', 'last_quarter') %}
            mdi:arrow-down-bold
          {% elif is_state('sensor.moon', 'waning_crescent') %}
            mdi:arrow-down-bold
          {% endif %}
        value_template: >
          {% if is_state('sensor.moon', 'new_moon') %}
            Luna Nuova
          {% elif is_state('sensor.moon', 'waxing_crescent') %}
            Luna Crescente
          {% elif is_state('sensor.moon', 'first_quarter') %}
            Primo Quarto
          {% elif is_state('sensor.moon', 'waxing_gibbous') %}
            Gibbosa Crescente
          {% elif is_state('sensor.moon', 'full_moon') %}
            Luna Piena
          {% elif is_state('sensor.moon', 'waning_gibbous') %}
            Gibbosa Calante
          {% elif is_state('sensor.moon', 'last_quarter') %}
            Ultimo Quarto
          {% elif is_state('sensor.moon', 'waning_crescent') %}
            Luna Calante
          {% endif %}

      ha_uptime:
        entity_id: sensor.homeassistant_attivo_da
        friendly_name_template: "HA Uptime"
        value_template: >
          {% if states('sensor.homeassistant_attivo_da') == '0.0' %}
            Appena riavviato...
          {% else %}
            {% macro phrase(value, name) %}
            {%- set value = value | int %}
            {{- '{} {}{}'.format(value, name, end) if value | int > 0 else '' }}
            {%- endmacro %}

            {% set days = (states('sensor.homeassistant_attivo_da') | int) %}
            {% set hours = (states('sensor.homeassistant_attivo_da') | float - states('sensor.homeassistant_attivo_da') | int) * 24 %}
            {% set minutes = (hours - hours | int) * 60 %}

            {{ [ phrase(days, 'giorni'), phrase(hours, 'ore'), phrase(minutes, 'minuti') ] | select('!=','') | list | join(', ') }}
          {% endif %}

      host_uptime:
        entity_id: sensor.last_boot
        friendly_name_template: "Host Uptime"
        value_template: >
          {% set up_time = as_timestamp(now()) - as_timestamp(states('sensor.last_boot')) %}

          {% set minutes = (up_time // 60) | int %}
          {% set hours = (minutes // 60) %}
          {% set days = (hours // 24) %}

          {% set minutes = (minutes % 60) %}
          {% set hours =  (hours % 24) %}
          {% set days = (days % 7) %}

          {% macro phrase(value, name) %}
                      {%- set value = value %}
                      {{- '{} {}{}'.format(value, name, end) if value | int > 0 else '' }}
          {%- endmacro %}

          {% set text = [ phrase(days, 'giorni'), phrase(hours, 'ore'), phrase(minutes, 'minuti') ] | select('!=','') | list | join(', ') %}
          {% set last_comma = text.rfind(',') %}
          {% if last_comma != -1 %}
              {% set text = text[:last_comma] + ' e' + text[last_comma + 1:] %}
          {% endif %}

          {{ text }}


      stato_lavatrice:
        friendly_name: "Lavatrice"
        icon_template: mdi:washing-machine
        value_template: >-
          {% if states.sensor.lavatrice_energy_power.state | int < 5 %}
            Spenta
          {% elif states.sensor.lavatrice_energy_power.state | int > 5 %}
            Lavaggio in corso
          {% endif %}

      stato_asciugatrice:
        friendly_name: "Asciugatrice"
        icon_template: mdi:tumble-dryer
        value_template: >-
          {% if states.sensor.asciugatrice_energy_power.state | int < 5 %}
            Spenta
          {% elif states.sensor.asciugatrice_energy_power.state | int > 5 %}
            Asciugatura in corso
          {% endif %}


  - platform: filter
    name: "consumi generali filtered"
    entity_id: sensor.widom_ume304_energy_driven_switch_power
    filters:
      - filter: range
        upper_bound: 6000
        lower_bound: 0
  - platform: integration
    source: sensor.consumi_generali_filtered
    name: Consumi Kwh filtered
    unit_prefix: k
    round: 2

#############################################################
################       SHELLY SENSORI         ###############
#############################################################

  - platform: mqtt
    name: "Consumo Presa Ingresso"
    state_topic: "shellies/shelly1pm-B1DD37/relay/0/power"
    unit_of_measurement: "W"
  - platform: mqtt
    name: "Alert Presa Ingresso"
    state_topic: "shellies/shelly1pm-B1DD37/overtemperature"
    qos: 0
  - platform: integration
    source: sensor.consumo_presa_ingresso
    name: kWh Presa Ingresso
    unit_prefix: k
    round: 2


  - platform: mqtt
    name: "Consumo Presa Bagno"
    state_topic: "shellies/shelly1pm-B1D5E2/relay/0/power"
    unit_of_measurement: "W"
  - platform: mqtt
    name: "Alert Presa Bagno"
    state_topic: "shellies/shelly1pm-B1D5E2/overtemperature"
    qos: 0
  - platform: integration
    source: sensor.consumo_presa_bagno
    name: kWh Presa Bagno
    unit_prefix: k
    round: 2


  - platform: mqtt
    name: "Consumo Presa Pranzo"
    state_topic: "shellies/shelly1pm-B1DE80/relay/0/power"
    unit_of_measurement: "W"
  - platform: mqtt
    name: "Alert Presa Pranzo"
    state_topic: "shellies/shelly1pm-B1DE80/overtemperature"
    qos: 0
  - platform: integration
    source: sensor.consumo_presa_pranzo
    name: kWh Presa Pranzo
    unit_prefix: k
    round: 2

  - platform: mqtt
    name: "Consumo Presa Corridoio"
    state_topic: "shellies/shellyswitch-5A449F/relay/power"
    unit_of_measurement: "W"
  - platform: integration
    source: sensor.consumo_presa_corridoio
    name: kWh Presa Corridoio
    unit_prefix: k
    round: 2


###################################################################
################       Allarme Mqtt SENSORI         ###############
###################################################################

  - platform: mqtt
    name: Allarme INTRUSIONE
    state_topic: "riscopanel/isonalarm"
  - platform: mqtt
    name: Allarme ultimo evento
    state_topic: "riscopanel/eventhistory/lastevent"
